-------------------------------------------------------------------------------------------------------------------------------------------
                                                    BANCO DE DADOS / MYSQL
-------------------------------------------------------------------------------------------------------------------------------------------

Para o que serve?
	Registrar instâncias de coisas separadas que tem caracterisitcas semelhantes em tabelas.

-- Como modelar
	1. Modelar entidades com atributos e relacionamentos.
	2. Classificar relacionamento com suas cardinalidades.

-- Estrutura
	Modelo relacional: Tipo de estrutura de banco de dados onde as entidades se relacionam e permitem que você caminhe atr
	avés dessas relações buscando informações relacionadas.
	BANCO DE DADOS { TABELAS { COLUNAS { REGISTROS/TUPLAS }}}
	ENGINE: "Máquina de criação de tabelas" 
	inoDB: "Criação de tabelas com algumas carácteristicas, permite relacionamento entre entidades pois são compátives com 
	chaves estrangeiras e garantem os 4 fundamentos necessários para que ocorra uma transação {Durabilidade, isolamento,
	consistência e atomicidade}"
	
-- Tipos
	Inteiros: 
		TINYINT: 1 BYTE
		SMALLINT: 2 BYTE
		MEDIUMINT: 3 BYTE
		INT: 4 BYTE
		BIGINT: 8 BYTE
	Ponto flutuante:
		FLOAT: 4 BYTES		// Pode ser especificado quantos digitos e casas decimais irá receber, exemplo: FLOAT(7,4)
		DOUBLE: 8 BYTES
	Fixos:
		DECIMAL:	|   Até 65 digitos
		NUMERIC:	|   Tambem pode ser especificado quantos digitos e casas decimais irá receber.
	Único:
		BIT:		// Até 64 BITS; exemplo: BIT(1) pode ser 1 ou 0; BIT(2) - Pode ser 01,10,00,11 (Usado em tipos
		lógicos, onde precisamos de 0 ou 1)
	Data e Hora:
		DATE: 1000-01-01 ATŔ 9999-12-31
		DATETIME: 1000-01-01 00:00:00 ATŔ 9999-12-31 23:59:59
		TIMESTAMP: 1970-01-01 00:00:01 UTC até 2038-01-19 UTC	// Leva em consideração o fuso horário
		TIME: -838:59:59 e 839:59:59
		YEAR: 1901 - 2155 (Pode ser expresso no formato 2 ou 4 dígitos)
	Strings:
		CHAR(X)		// Caracteres com valor fixo (0 a 255)	// Se definido 4 caracteres por exemplo, e você 
		armazenar 3, será introduzido um espaço em branco no lugar desse quarto digito.
		VARCHAR(X)	// Varia de acordo com valor passado, sem passar do limite imposto.
		BINARY		// Valor fixo de 0 a 255 expressos em Binário
		VARBINARY	// Caracteres com valor váriados entre 0 a 255, expressos em binário.
		BLOB: Binário longo, podemos ter:
			TINYBLOB,
			BLOB,
			MEDIUMBLOB,
			LONGBLOB
		TEXT	// Texto longo
			TINYTEXT,
			TEXT,
			MEDIUMTEXT,
			LONGTEXT
		ENUM		// Permite armazenar uma lista de valores pré definidos.
		SET e COLLATE		// Definir que tipo de conjunto de caracteres serão suortados.
	SPACIAL:
		GEOMETRY,
		POINT,
		POLYGON,
		MULTIPOLYGON


-- Definições / Conceitos
	   Tipos de dados: podem receber parametrizações de quantos digitos e casas decimais irá receber, exemplo: INT(4), se armaz
	   enado o valor 5, a representação ficará da seguinte forma: 0005.
	   View		// Agrupamento de tabelas
	   Procedures		// Permitem gerar lógicas estruturadas / funções.
	   Trigger		// Alertas/Avisos caso aconteca qualquer coisa na tabela.
	   Integridade referêncial: Não se pode deletar registros que possuem relacionamentos.
	   Relacionamento: Entidade relacionada a outra entidade, ultiza o diagrama entidade-relacionamento para esboçar sua
	   estrutura. (DER)
	   Entidade: Tabela
	   Atributos: carácteristicas da tabela
	   Cardinalidade: 1 - n, n - 1. (Conceito que define com quantos registros/tuplas cada registro/tuplas pode se relacionar) {
		Relacionamentos:
			1 p 1: Entidade dominanete com chave estrangeira de outra entidade e vice-verssa
			1 p n: Chave primária do lado 1 e joga para n como chave estrangeira
			n p n: Irá ser criado uma nova entidade para representar esse relacionamento, nessa nova entidade será 
			criado novos atributos referente ao cenário que se encontra criando uma chave primária para identifica-lá,
			assim cada tabela n irá virar 1 que irá se relacionar com essa nova entidade que será n p n. Neste caso 
			jogar a chave primária de cada entidade na entidade n p n. Exemplo: Pedidos tem itens pedidos que se rela
			ciona com a tabela pedidos e produtos, ou seja, a itens pedidos é a tabela intermediadora.
	   }	
	   Chave primária / PRIMARY KEY: Identifica cada registro, ou seja, ele e unico naquele contexto.
	   Chave estrangeira  / Foreign key: Chave primária de uma entidade x que esta na entidade y para criar um relacionamento.
   	   Erros comuns {
	   	OUT FO RANGE: Ocorre quando os valores estouram os limites do tipo.
	   }
   
   
   -- Linguagens
   	DDL: Definição / Mexe na estrutura {CREATE DATABASE, CREATE TABLE, ALTER TABLE, DROP TABLE }
	DML: Manipulação / Mexe em dados {INSERT INTO, UPDATE, DELETE, TRUNCATE, SELECT}
	DQL: Solicitações
	DCL: Controle
	DTL: Transações {Durabilidade, isolamento, consistência e atomicidade}
	// Data [x] Language
	
-- Comandos
	CREATE:
		CREATE DATABASE bancodeteste 		// Criar base de dados
		DEFAULT CHARACTER SET utf8 		|| Ambos para configu -
		DEFAULT COLLATE utf8_general_ci;	|| ração de acentuação
	SELECT:
		SELECT * FROM projetoDoceria.product;   // Listar do banco de dados projetoDoceria os dados da tabela produto
		SELECT * FROM tbCliente WHERE YEAR(DATA_NASCIMENTO) = 1995;
		SELECT * FROM tbCliente WHERE MOUNTH(DATA_NASCIMENTO) = 05;
		
		* Inner Join		// retorna os registros que são comuns às duas tabelas ou seja que tenha relação.
		
		  SELECT o.purchaseOrder_id,  p.name, o.amount, p.unitaryValue, o.Totalvalue
		  FROM orderedItem as o
		  INNER JOIN product as p
			on o.product_id = p.id		// Restrição para o JOIN, assim ira juntar as tabelas porém apli
			cando a restrição definida no on.
			ORDER BY o.purchaseOrder_id;	

		* Left Join	// tem como resultado todos os registros que estão na tabela A (mesmo que não estejam 
		na tabela B) e os registros da tabela B que são comuns à tabela A.
		  
		  SELECT a.Nome, b.Nome
		  FROM TabelaA as A
		  LEFT JOIN TabelaB as B
				on a.Nome = b.Nome

		* Right Join    // teremos como resultado todos os registros que estão na tabela B (mesmo que não estejam na tabela A) e os registros 
		da tabela A que são comuns à tabela B.
			SELECT a.Nome, b.Nome
			FROM TabelaA as A
			RIGHT JOIN TabelaB as B
				on a.Nome = b.Nome

		* Outer Join (Pode ser usado LEFT / RIGHT para definir qual tabela terá preferência na query)   //  tem como resultado todos 
		os registros que estão na tabela A e todos os registros da tabela B, inclusive os que não se relacionam.
			SELECT a.Nome, b.Nome
			FROM TabelaA as A
			FULL OUTER JOIN TabelaB as B
				on a.Nome = b.Nome
		* Left Excluding Join   // retorna como resultado todos os registros que estão na tabela A e que não estejam na tabela B.
			SELECT a.Nome, b.Nome
			FROM TabelaA as A
			LEFT JOIN TabelaB as B
				on a.Nome = b.Nome
				WHERE b.Nome is null

		* Right Excluding Join    //  retorna como resultado todos os registros que estão na tabela B e que não estejam na tabela A.
			SELECT a.Nome, b.Nome
			FROM TabelaA as A
			RIGHT JOIN TabelaB as B
				on a.Nome = b.Nome
				WHERE a.Nome is null

		* Outer Excluding Join    //  teremos como resultado todos os registros que estão na tabela B, mas que não estejam na tabela A, e todos os 
		registros que estão na tabela A, mas que não estejam na tabela B.
			SELECT a.Nome, b.Nome
			FROM TabelaA as A
			FULL OUTER JOIN TabelaB as B
				on a.Nome = b.Nome
				WHERE a.Nome is null or b.Nome is null
		
	USE bancodeteste;   		// Usar base de dados
	DESCRIBE || DESC;		// Descrever dados desejados
	STATUS;			// Listar BD abertos
	DROP;			// Excluir tabelas
	RENAME TABLE users TO user;    // Renomear tabela
	
	* Tabelas e colunas
	  
	  CREATE TABLE users( 
	  id int(4) AUTO_INCREMENT,
	  name varchar(255) NOT NULL,
	  email varchar(255) NOT NULL UNIQUE,
	  telephone varchar(255),
	  userName varchar(255) NOT NULL UNIQUE,
	  password varchar(255) NOT NULL,
	  PRIMARY KEY (id)
	  );
	  
	  ALTER TABLE itemPedido CHANGE COLUMN quantidade amount INT(11) NOT NULL;	// Alterar dados da coluna renomeando a 
	  mesma [CHANGE: tipos, constraints e nome da coluna] 
	  ALTER TABLE itemPedido MODIFY COLUMN quantidade INT(11) NOT NULL;		// Alterar dados da coluna [MODIFY: alt
	  erar tipos e constraints]
	  ALTER TABLE purchaseOrder ADD COLUMN customer_id INT(4) NOT NULL;	// Adicionar dados coluna
	  ALTER TABLE pessoa RENAME TO gafanhotos;	// Renomear tabelas
	  ALTER TABLE TABELA_SERVICO ADD CONSTRAINT 'NOME DA CONSTRAINT' FOREIGN KEY(NOME ATRIBUTO AO QUAL QUER REFERENCIAR)
	  REFERENCES NOMEDATABELA(ATRIBUTOQUEDESEJA); 		// Alterando tabela e adicionando relacionamentos
	  TRUNCATE TABLE cursos;
	  	  
	* Registros
   	 DELETE FROM tbl_autores WHERE ID_Autor = 2;		// Excluir registros
 	 INSERT INTO fornecedores(codigo, nome) VALUES (null, “Ricardo")	// Inserir dados na tabela
	 UPDATE nomedatabela SET atributo=novovalor WHERE id=iddatabela		// Atualizando registros de colunas já populadas

-- RESTRIÇÕES
	AUTO-INCREMENT
	NOT NULL
	UNIQUE	
	AFTER
	FIRST	
	UNSIGNED (Sem acentuaçoes)
	IF NOT EXISTS || IF EXISTS	// Usado como condicional, exemplo: CREATE TABLE IF NOT EXISTS pessoa(...);
	
-- OPERADORES RELACIONAIS
	LIMIT		// Limitar quantas linhas serão afetadas. {
	SELECT * FROM ... WHERE ... LIMIT 1
	SELECT * FROM ... WHERE ... LIMIT 2,3	// Neste caso ira retornar apenas os registros apartir do indice 2 os próximos 
	3 registros.
	}
	ORDER BY	// Ordena por
	DESC|ASC	// Decrescente / Ascendente
	BETWEEN		// Entre
	IN		// Dentro dos paramêtros especificados. Exemplo: SELECT * FROM ... WHERE SABOR IN ('MANGA','LARANJA');
	LIKE|NOT LIKE	// Parecido com
	DISTINCT	// Distinguir registros que não repetem
	NOT 		// Nega o que estiver a frente
	GROUP BY	// Agrupado por
	
-- WILDCARDS
	_	// Exige que tenha algo
	%	// Normalmente usado em conjunto com algo, representa "Vários ou nenhum caráctere" ex: LIKE nome = 'P%'
	
-- FUNCÕES DE AGRAGAÇÃO
	COUNT()		// Exibir quantos registros há (SELECT COUNT(*) FROM...)
	MAX()|MIN()	// Exibir maior (SELECT MAX(carga) FROM...)
	SUM()		// Soma
	AVG()		// Média 
	
-- Instalação
	MySql > sudo apt install mysql-server mysql-client && sudo mysql_secure_installation
	WorkBench > sudo apt install mysql-workbench
  
-- Comandos terminal / Configuração / Manutenção
	mysql -h localhost -u root -p   // Entrar no mysql setando o -h referenciando o host (localhost), -u referenciando ao 
	usuário	e -p referente a senha.
	CREATE USER 'novousuario'@'localhost' IDENTIFIED BY 'password';   // Criar um Novo Usuário
	ALTER USER 'root'@'localhost' IDENTIFIED BY 'nova-senha';		// Alterar senha do usuário root
	GRANT ALL PRIVILEGES ON * . * TO 'novousuario'@'localhost';   // Atribuir privilégios a determinado usuário
	FLUSH PRIVILEGES;   // Resetar privilégios
-- Gerar schema visual/gráfico do banco de dados(Diagrama de atividades)
	WorkBench: Reverse Enginner Database
-- Dump
	Exportar:
		Workbench: Server > Data Export > Setar atributos (Exportar apenas estrutura, datas, e etc...)
		Terminal: mysqldump -u root -p projetoDoceria > ~/Documents/projetoDoceria.sql
	Importar:
		Workbench: Server > Data Import > Setar atributos
		Terminal: mysql -u root -p projetoDoceria < ~/Documents/projetoDoceria.sql
-- Sites 
	Curso > https://www.youtube.com/watch?v=Ofktsne-utM&list=PLHz_AreHm4dkBs-795Dsgvau_ekxg8g1r 
	Desinstalar mysql > https://linuxscriptshub.com/uninstall-completely-remove-mysql-ubuntu-16-04/ 
	Primeiros passos mysql > https://www.devmedia.com.br/primeiros-passos-no-mysql/28438
	Relacionamento de tabelas > https://www.devmedia.com.br/forum/relacionamento-de-tabelas-no-mysql-chave-estrangeira/558559


